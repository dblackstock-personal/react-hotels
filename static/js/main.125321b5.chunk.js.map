{"version":3,"sources":["components/Rating.js","components/Comment.js","components/User.js","components/Hotel.js","App.js","serviceWorker.js","index.js","images/hotelWarm.jpg","images/hotelBoring.jpg","images/terry.jpg","images/oskar.jpg"],"names":["Rating","props","rating","Comment","comment","User","className","src","image","class","user","Hotel","userImage","App","hotelWarm","personTerry","hotelBoring","personOskar","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"sNAEe,SAASA,EAAOC,GAC3B,OACI,6BACKA,EAAMC,Q,MCFJ,SAASC,EAAQF,GAC5B,OACI,6BACKA,EAAMG,SCJJ,SAASC,EAAKJ,GACzB,OACI,yBAAKK,UAAU,QACX,yBAAKA,UAAU,aAAaC,IAAKN,EAAMO,QACvC,uBAAGC,MAAM,oBAAoBR,EAAMS,OCDhC,SAASC,EAAMV,GAC1B,OACI,yBAAKK,UAAU,SACX,yBAAKA,UAAU,aAAaC,IAAKN,EAAMO,QACvC,kBAACR,EAAD,CAAQE,OAAQD,EAAMC,SACtB,kBAACC,EAAD,CAASC,QAASH,EAAMG,UACxB,kBAACC,EAAD,CAAMK,KAAMT,EAAMS,KAAMF,MAAOP,EAAMW,a,wECoBlCC,E,iLArBX,OACE,yBAAKP,UAAU,WACX,kBAACK,EAAD,CACAH,MAAOM,IACPZ,OAAO,iCACPE,QAAQ,6HACRM,KAAK,oBACLE,UAAWG,MAEX,kBAACJ,EAAD,CACEH,MAAOQ,IACPd,OAAO,qBACPE,QAAQ,6CACRM,KAAK,uBACLE,UAAWK,W,GAhBLC,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.125321b5.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Rating(props) {\n    return (\n        <div>\n            {props.rating}\n        </div>\n    )\n}\n","import React from 'react'\nimport { tsPropertySignature } from '@babel/types'\n\nexport default function Comment(props) {\n    return (\n        <div>\n            {props.comment}\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function User(props) {\n    return (\n        <div className=\"user\">\n            <img className=\"user_image\" src={props.image}/>\n            <p class=\"user_description\">{props.user}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport Rating from './Rating.js'\nimport Comment from './Comment.js'\nimport User from './User.js'\n\nexport default function Hotel(props) {\n    return (\n        <div className=\"hotel\">\n            <img className=\"hotelImage\" src={props.image}/>\n            <Rating rating={props.rating}/>\n            <Comment comment={props.comment}/>\n            <User user={props.user} image={props.userImage}/>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Hotel from './components/Hotel.js';\nimport hotelWarm from './images/hotelWarm.jpg';\nimport hotelBoring from './images/hotelBoring.jpg';\nimport personTerry from './images/terry.jpg';\nimport personOskar from './images/oskar.jpg';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n          <Hotel\n          image={hotelWarm}\n          rating=\"★★★★★\"\n          comment=\"Words don't express how much I liked this hotel, but in the next 500 words I aim to explain the extent of my appreciation.\"\n          user=\"Terry from London\"\n          userImage={personTerry}\n          />\n          <Hotel\n            image={hotelBoring}\n            rating=\"★★★\"\n            comment=\"It was alright, not worth the money really\"\n            user=\"Oskar from Llandudno\"\n            userImage={personOskar}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hotelWarm.ab3d15d9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hotelBoring.365ea9ee.jpg\";","module.exports = __webpack_public_path__ + \"static/media/terry.9f389363.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oskar.7213f862.jpg\";"],"sourceRoot":""}